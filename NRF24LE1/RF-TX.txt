
#include "reg24le1.h"
#include "main.h"
#include "nRF24L01.h"

/*
================================================================================
SPI_Exchange :
    Exchange a byte via the MCU
input     : dt, the byte to be sent
Output    : The byte read from the slaver
================================================================================
*/
INT8U SPI_ExchangeByte( INT8U dt )  
{
    SPIRDAT = dt;                   
    while( !( SPIRSTAT & 0x02  ) ); 
    return SPIRDAT;
}

//RF interrupt
INT8U rf_flag = 0;
void RF_IRQ( void ) interrupt INTERRUPT_RFIRQ
{
    INT8U i = L01_ReadIRQSource( );

    if( i & ( 1<<RX_DR ) )      
    {
        rf_flag |= ( 1<<1 );        //flag=2
    }
    if( i & ( 1<<TX_DS ) )      //Send data OK 
    {
        rf_flag |= ( 1<<2 );          //flag=4
    }
    if( i & ( 1<<MAX_RT ) )     //Send data fail 
    {
        rf_flag |= ( 1<<3 );    //flag=6
    }
    L01_ClearIRQ( IRQ_ALL );   
}
/*
================================================================================
UART_Init:
    Initialize the UART
input     : BaudIndex, the index of the  baudrate of the UART, 0-7, 1200-115200
Output    : None
================================================================================
*/
code unsigned int UART_BAUD_TBL[7] = { 607, 816, 920, 972, 998, 1011, 1015 };
//0----6,,,--> 1200, 2400, 4800, 9600, 19200, 38400, 57600
void UART_Init( unsigned char BaudIndex )
{
    IEN0 &= ~( 1<<4 );              
    S0CON = ( 1<<6 ) | ( 1<<4 );     
    ADCON = 0x80;                   
    PCON |= 0x80;                   
    S0RELL = UART_BAUD_TBL[BaudIndex];
    S0RELH = UART_BAUD_TBL[BaudIndex] >> 8; // S0REL 
    IEN0 |= ( 1<<4 );               //Enable interrupt 
    P0DIR |= ( 1<<4 );              //P0.4, RXD, set as input P0DIR
    P0DIR &= ~( 1<<3 );             //P0.3, TXD, set as output P0DIR
}
unsigned char TX_OK = 0;
unsigned char RX_OK = 0;
static void UART0_ISR( void ) interrupt INTERRUPT_UART0  
{
    if( S0CON & ( 1<<1 ) )
    {
        //TX ok
        S0CON &= ~( 1<<1 ); 
        TX_OK = 1;
    }
    else if( S0CON & ( 1<<0 ) )
    {
        //RX ok
        S0CON &= ~( 1<<0 );
        RX_OK = 1;
    }
}

unsigned char UART0_getch( void ) 
{
    unsigned char tmp;

    if ( RX_OK == 1 )
    {
        RX_OK = 0;
        tmp = S0BUF;
        return tmp;
    } else {
        return 0;
    }
}

void UART0_getstring( unsigned char *buff, unsigned char size )  
{
    while ( size > 1 )
    {
        size --;
        *buff = UART0_getch();
        buff ++;
        while ( RX_OK == 0 );
    }
    *buff = UART0_getch();
}

void UART0_SendBuff( unsigned char *buff, unsigned char size )
{
    while( size -- )                
    {
        TX_OK = 0;                   
        S0BUF = *buff ++;           
        while( TX_OK == 0 );     
    }
    TX_OK = 0;
}
void UART0_SendStr( char* str )
{
    UART0_SendBuff( ( unsigned char* ) str, strlen( str ) ); 
}
int main( void )
{
    INT16U itmp;
    unsigned char rec[28];
	rec[26] = '\r';
	rec[27] = '\n';

    CLKCTRL = ( CLKCTRL | 0x80 ) & ~0x08;¡£
    P0DIR = 0; 
    RFCON = 0x07;                                      
    RFCE = 0;                                           
    RFCKEN = 1;                                        
    RF = 1;                                             
    for( itmp = 0; itmp < 30000; itmp ++ );

    UART_Init( 3 );                
    EA = 1;                       
    UART0_SendStr( "nRF24LE1 TX test start!\r\n" );  
    RFCE = 1;                                
    while( 1 )
    {
        P0 |= ( 1<<0 );  
        for( itmp = 0; itmp < 50000; itmp ++ );
        for( itmp = 0; itmp < 50000; itmp ++ );  
        L01_Init( );                    //Initialize the internal 24L01P
        L01_SetTXMode( );              
        L01_FlushTX( );                     
        L01_FlushRX( );

        while ( RX_OK == 0 );
        UART0_getstring(rec, 26);
        //Send via RF
        rf_flag = 0;
        L01_WriteTXPayload_Ack( ( INT8U* )rec, 28 ); 
        RFCE = 1;                                    
        while( rf_flag == 0 );    
        if( rf_flag & ( 1<<1 ) ) 
        {

        }
        if( rf_flag & ( 1<<2 ) )  
        {
            P0 ^= ( 1<<1 );       
            UART0_SendBuff( &rec, 26 ); 
            UART0_SendStr( " Send OK!\r\n" );
        }
        if( rf_flag & ( 1<<3 ) )      
        {
            P0 ^= ( 1<<2 );  
            UART0_SendStr( "Send Error!\r\n" ); 
        }
        RFCE = 0;     
        rf_flag = 0;   
    }
}